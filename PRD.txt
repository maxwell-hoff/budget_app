Personal Finance App - Product Requirements Document

1. Overview
The personal finance app will help users plan for major life events and retirement by converting future expenses into today's dollars using time value of money calculations. The app will also track current spending through bank statement analysis.

2. Core Features

2.1 Timeline Visualization
- Interactive timeline showing major life events/milestones
- Timeline should be blank by default with message "Select birthday to populate timeline"
- Once birthday is selected, timeline shows:
  - Age-based markers every 10 years (20, 30, 40, 50, etc.)
  - Two default milestones:
    - "Current" point showing user's current age
    - "Inheritance" point at age 100 (default lump sum of $10,000)
- Visual elements:
  - Vertical dashes for age markers
  - Age labels below the timeline line
  - Milestone names above the timeline line
  - Current age marker labeled as "Current"
- Ability to add/remove additional milestones
- Drag-and-drop functionality to adjust milestone timing
- Visual representation of age at each milestone
- Parent milestones shown on timeline with min/max age range from sub-milestones

2.2 Chart Formatting Specifications

2.2.1 Timeline Chart
- Container:
  - Width: calc(100% - 170px)
  - Margin-left: 170px
  - Background: #f8f9fa
  - Border: 1px solid #ddd
  - Border-radius: 4px
  - Padding: 20px
  - Dynamic height based on number of milestones
- Timeline Line:
  - Position: absolute
  - Top: 30px
  - Left: 0
  - Right: 0
  - Height: 3px
  - Background-color: #333
  - Width: 100%
- Age Markers:
  - Position: absolute
  - Width: 2px
  - Height: 12px
  - Background-color: #666
  - Z-index: 1
- Age Labels:
  - Position: absolute
  - Transform: translate(-50%, 0)
  - Font-size: 0.8em
  - Color: #666
  - Z-index: 2
- Milestone Markers:
  - Position: absolute
  - Width: 6px
  - Height: 6px
  - Background-color: #007bff
  - Border-radius: 50%
  - Transform: translate(-50%, -50%)
  - Cursor: pointer
  - Transition: all 0.3s ease
- Milestone Labels:
  - Position: absolute
  - Font-size: 0.9em
  - Color: #333
  - White-space: nowrap
  - Background-color: rgba(255, 255, 255, 0.9)
  - Padding: 2px 5px
  - Border-radius: 3px
  - Text-align: left
  - Width: 150px
  - Overflow: hidden
  - Text-overflow: ellipsis
  - Left: -151px
  - Transition: all 0.3s ease
- Highlighting:
  - Milestone markers: box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5)
  - Milestone labels: border: 2px solid #007bff, padding: 0 3px, background-color: rgba(0, 123, 255, 0.1)

2.2.2 NPV Chart
- Container:
  - Width: calc(100% - 170px)
  - Margin-left: 170px
  - Background: #f8f9fa
  - Border: 1px solid #ddd
  - Border-radius: 4px
  - Padding: 20px
  - Dynamic height based on number of milestones
- Chart Content:
  - Position: relative
  - Width: 100%
  - Height: 100%
- Bars:
  - Position: absolute
  - Height: 6px
  - Transition: width 0.3s ease, opacity 0.3s ease
  - Positive: background-color: #28a745
  - Negative: background-color: #dc3545
- Labels:
  - Position: absolute
  - Font-size: 0.9em
  - Color: #333
  - White-space: nowrap
  - Background-color: rgba(255, 255, 255, 0.9)
  - Padding: 2px 5px
  - Border-radius: 3px
  - Text-align: left
  - Width: 150px
  - Overflow: hidden
  - Text-overflow: ellipsis
  - Left: -151px
  - Top: -13px
  - Transition: all 0.3s ease
- X-axis:
  - Position: absolute
  - Bottom: -20px
  - Left: 0
  - Right: 0
  - Height: 3px
  - Background-color: #666
- X-axis Markers:
  - Position: absolute
  - Bottom: -24px
  - Width: 2px
  - Height: 10px
  - Background-color: #666
- X-axis Labels:
  - Position: absolute
  - Bottom: -50px
  - Transform: translateX(-50%)
  - Font-size: 0.8em
  - Color: #666
- Total Container:
  - Position: absolute
  - Top: -40px
  - Left: 20px
  - Display: flex
  - Align-items: center
  - Gap: 10px
- Total Label:
  - Font-size: 16px
  - Font-weight: 500
  - Color: #333
- Total Value:
  - Font-size: 20px
  - Font-weight: 600
  - Padding: 4px 8px
  - Border-radius: 4px
  - Transition: all 0.3s ease
  - Positive: color: #28a745, background-color: rgba(40, 167, 69, 0.1)
  - Negative: color: #dc3545, background-color: rgba(220, 53, 69, 0.1)

2.2.3 Net Worth Chart
- Container:
  - Width: calc(100% - 170px)
  - Margin-left: 170px
  - Background: #f8f9fa
  - Border: 1px solid #ddd
  - Border-radius: 4px
  - Padding: 20px
  - Height: 300px
- Chart Content:
  - Position: relative
  - Width: 100%
  - Height: 100%
- Line:
  - SVG element
  - Position: absolute
  - Top: 0
  - Left: 0
  - Width: 100%
  - Height: 100%
  - Stroke-width: 2
  - Positive: stroke: #4CAF50
  - Negative: stroke: #f44336
- Y-axis:
  - Position: absolute
  - Top: 0
  - Left: 0
  - Width: 20px
  - Height: 100%
- Y-axis Line:
  - Position: absolute
  - Top: 0
  - Left: 0
  - Width: 1px
  - Height: 100%
  - Background-color: #000
- Y-axis Markers:
  - Position: absolute
  - Left: 0
  - Width: 5px
  - Height: 1px
  - Background-color: #000
- Y-axis Labels:
  - Position: absolute
  - Left: -50px
  - Transform: translateY(-50%)
  - Font-size: 12px
  - Color: #666
- X-axis:
  - Position: absolute
  - Bottom: 0
  - Left: 0
  - Width: 100%
  - Height: 20px
- X-axis Line:
  - Position: absolute
  - Bottom: 0
  - Left: 0
  - Width: 100%
  - Height: 1px
  - Background-color: #000
- X-axis Markers:
  - Position: absolute
  - Bottom: 0
  - Width: 1px
  - Height: 5px
  - Background-color: #000
- X-axis Labels:
  - Position: absolute
  - Bottom: -20px
  - Transform: translateX(-50%)
  - Font-size: 12px
  - Color: #666
- Total Container:
  - Position: absolute
  - Top: -40px
  - Left: 20px
  - Display: flex
  - Align-items: center
  - Gap: 10px
- Total Label:
  - Font-size: 16px
  - Font-weight: 500
  - Color: #333
- Total Value:
  - Font-size: 20px
  - Font-weight: 600
  - Padding: 4px 8px
  - Border-radius: 4px
  - Transition: all 0.3s ease
  - Positive: color: #28a745, background-color: rgba(40, 167, 69, 0.1)
  - Negative: color: #dc3545, background-color: rgba(220, 53, 69, 0.1)

2.3 Milestone Management
- Each milestone can be configured with:
  - Name
  - Age at occurrence
  - Expense type (annuity vs lump sum)
  - Amount
  - Duration (for annuity-type expenses)
  - Monthly income (for retirement milestone)
- Parameters should be adjustable in real-time
- Changes should immediately update the DCF calculations
- Sub-milestone functionality:
  - Ability to add sub-milestones to any milestone
  - Parent milestone name field appears when multiple sub-milestones exist
  - Sub-milestones shown as containers within parent milestone
  - Drag-and-drop reordering of sub-milestones
  - Single sub-milestone case shows as regular milestone
  - Transition handling between single and multiple sub-milestone states

2.4 DCF Calculations
- Convert future expenses to present value
- Use user's birthday as reference point
- Support for both annuity and lump sum calculations
- Real-time updates as parameters change
- Display both nominal and present value amounts
- NPV chart shows individual sub-milestones

2.5 Net Worth Calculation
- Calculate net worth at each age by:
  1. For Assets and Liabilities:
     - Fixed Duration:
       - Calculate remaining balance at each age based on:
         - Initial amount
         - Rate of return
         - Payments made
         - Time remaining
     - Perpetuity:
       - Balance is the initial amount, adjusted for payments made
       - No time value of money calculations needed
  2. For Income and Expenses:
     - Calculate cumulative impact on current liquid assets
     - If income > expenses, add to current liquid assets
     - If expenses > income, subtract from current liquid assets
     - If current liquid assets would go negative, add excess to current debt
  3. For Current Liquid Assets:
     - Start with initial amount
     - Add/subtract income/expense impact
     - Apply rate of return to remaining balance
  4. For Current Debt:
     - Start with initial amount
     - Add any excess expenses that would make liquid assets negative
     - Apply interest rate to remaining balance
     - Subtract payments made
- Display net worth over time in a chart
- Update calculations in real-time as parameters change
- Net worth calculations use sub-milestones for accurate tracking

2.6 Bank Statement Analysis
- Parse CSV bank statements
- Categorize transactions
- Calculate current balance sheet
- Track spending patterns
- Support for multiple bank statement formats (future enhancement)

3. Technical Requirements

3.1 Frontend
- HTML/JavaScript web interface
- Responsive design
- Interactive timeline using a JavaScript library (e.g., Timeline.js)
- Real-time calculations and updates
- Clean, intuitive UI
- Sub-milestone UI components:
  - Parent milestone container
  - Sub-milestone containers
  - Add/remove sub-milestone buttons
  - Parent name field
  - Drag-and-drop functionality

3.2 Backend
- Python-based server
- SQLite database
- Object-oriented design
- Test-driven development
- RESTful API endpoints
- Sub-milestone data model:
  - Parent milestone ID field
  - Sub-milestone relationships
  - Order tracking for sub-milestones

3.3 Data Model
- User profile (birthday, current age)
- Milestones (name, age, type, amount, duration)
- Sub-milestones (parent milestone ID, order)
- Transactions (date, amount, category, description)
- Balance sheet (assets, liabilities, net worth)

4. Future Enhancements
- Multiple bank statement format support
- Investment portfolio integration
- Tax planning features
- Multiple currency support
- Export/import functionality
- Mobile app version
- Enhanced sub-milestone features:
  - Nested sub-milestones
  - Sub-milestone templates
  - Bulk sub-milestone operations

5. Success Metrics
- Accurate DCF calculations
- Real-time parameter updates
- Intuitive milestone management
- Reliable bank statement parsing
- Responsive UI
- Comprehensive test coverage
- Smooth sub-milestone transitions
- Accurate parent/child relationships

Scenario Table & Solved Parameter Values PRD
============================================

Objective
---------
Provide an "Excel-like" pivot table view ("Scenario Table") that shows, for every Scenario → Sub-scenario, the machine-calculated value that *solves* a chosen **goal parameter** while holding the milestone's present-value constant after applying arbitrary combinations of **scenario parameter values**.

Glossary
--------
• **Goal Parameter** – any milestone field (`amount`, `duration`, …) that the user has flagged via the "goal" checkbox (table: `goals`).  Exactly one goal parameter is viewed in the table at a time (selected from a dropdown).
• **Scenario Parameter Value** – a per-milestone override stored in `scenario_parameter_values`.
• **Solved Value** – the number calculated for the chosen goal parameter that keeps the milestone's present-value unchanged once a specific combination of scenario parameter values is applied.

Back-end Data Model
-------------------
Table: `solved_parameter_values`
| column                    | type           | notes |
|---------------------------|----------------|-------|
| id                        | PK             | |
| milestone_id              | FK -> milestones.id | |
| scenario_id               | INT            | denormalised for fast filtering |
| sub_scenario_id           | INT            | " |
| goal_parameter            | VARCHAR(50)    | (`amount`, `duration`, …) |
| scenario_parameter        | VARCHAR(50)    | name of the scenario parameter that was varied |
| scenario_value            | VARCHAR(100)   | concrete value that was used (stringified) |
| solved_value              | FLOAT          | machine-calculated result |
| created_at / updated_at   | TIMESTAMP      | |

A unique constraint (`milestone_id`, `goal_parameter`, `scenario_parameter`, `scenario_value`) prevents duplicates.

Solving Logic (v1)
------------------
Invariant: **keep the milestone's present value (PV) identical to the PV in the base milestone**.
1.  Build the full Cartesian product of scenario values for the milestone (one row per combination).
2.  For each combination:
    a. Overlay the values on a working copy of the milestone.
    b. Numerically solve for the chosen goal parameter such that `PV_solved == PV_original`.
3.  Persist/update the row in `solved_parameter_values`.

Implementation triggers:
• Whenever `scenario_parameter_values` are added/updated/deleted.
• Whenever `goals.is_goal` toggles.
• Manual "Re-solve" endpoint (optional, admin only).

Initial API Endpoints
---------------------
GET  `/api/goals`  → `["amount", "duration", …]`  (distinct parameters flagged as goals)
GET  `/api/scenario-table?goal=amount`  → JSON rows pulled from `solved_parameter_values`.

Front-end (first pass)
----------------------
• Add a new section **Scenario Table** under the charts.
• `<select id="goalDropdown">` populated from `/api/goals`.
• Render table using Tabulator.js (or plain `<table>` + Bootstrap for v1).

Performance / Volume
--------------------
• Expect thousands of rows; index (`scenario_id`, `sub_scenario_id`, `goal_parameter`) on `solved_parameter_values`.
• No audit trail or versioning is required; rows are overwritten on re-solve.

Future Considerations
---------------------
• Invariant may change (e.g., "die with $X at age 100" *plug*).  Solver service will accept a strategy enum; PV remains default.
• Optimisation across milestones may require multi-variable solvers; not in scope for v1.

Target Sub-Scenario Anchor
==========================

Problem
-------
When comparing “what-if” sub-scenarios inside the **Scenario Table** the solver currently
keeps each sub-scenario’s own age-100 Beginning Assets balance constant. This yields
identical solved values when the goal parameter is `age_at_occurrence` (e.g. retirement
age); every sub-scenario starts from its *own* baseline so their retirement ages line up.

Solution
--------
Allow the user to **pick one sub-scenario per scenario as the *target***. Its
age-100 Beginning Assets figure becomes the *anchor* for *all* sibling
sub-scenarios while solving goal parameters. The target itself is never
re-solved – it defines the benchmark.

Data Model
----------
Table: `target_sub_scenarios`
| column           | type    | notes                                      |
|------------------|---------|--------------------------------------------|
| id               | PK      |                                            |
| scenario_id      | INT     | FK → scenarios.id, UNIQUE                  |
| sub_scenario_id  | INT     | FK → sub_scenarios.id                      |
| created_at       | TS      |                                            |
| updated_at       | TS      |                                            |

API
----
• **GET** `/api/target-sub-scenarios?scenario_id=1` → `{sub_scenario_id: 3}` or `{}`  
• **POST** `/api/target-sub-scenarios` `{scenario_id: 1, sub_scenario_id: 3}` (upsert)  
• **DELETE** `/api/target-sub-scenarios?scenario_id=1` clears the mapping

Solver Workflow (v2)
--------------------
1.  Precompute baseline DCF projections (unchanged).
2.  Lookup anchor BA per *scenario* using the target mapping.
3.  Skip solving for the target sub-scenario itself – its baseline projection is taken as-is.
4.  For all other sub-scenarios in the scenario run the goal solver with the **same anchor BA**.
5.  If no target is defined, fall back to legacy per-sub-scenario anchors so behaviour is backward-compatible.

Front-end
---------
A checkbox ("Target") next to the Sub-Scenario selector lets the user pick or clear the target. Behind the scenes it calls the API above and updates its indeterminate/checked state automatically.

Edge Cases / Constraints
------------------------
• Only one target row per scenario enforced by DB UNIQUE(scenario_id).  
• Deleting a sub-scenario must also delete its target mapping (ON DELETE CASCADE or manual).  
• Changing the target invalidates previously solved values; users should click *Calculate Scenarios* to refresh (automatic trigger planned for future).
